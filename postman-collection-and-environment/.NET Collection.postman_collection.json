{
	"info": {
		"_postman_id": "cb0cc8bc-9788-4277-8460-66d036dcd9d3",
		"name": ".NET Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40460161"
	},
	"item": [
		{
			"name": "Account Controller",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property(\"password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain errors\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Admin3\",\r\n  \"email\": \"admin03@email.com\",\r\n  \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Account/register",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Account",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property(\"password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Admin3\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Account/login",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"User\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Account/login",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Admin3\",\r\n  \"role\": \"Admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Account/assign-role",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Account",
								"assign-role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Test\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Account/add-role",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Account",
								"add-role"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Categories Controller",
			"item": [
				{
					"name": "Post Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the 'id' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the 'description' field with value 'Test Category'\", function () {\r",
									"    pm.expect(pm.response.json().description).to.eql('Test Category');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Test Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for response body to be an array\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test for specific category description\r",
									"pm.test(\"Specific category description exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.some(category => category.description === \"Electronics\")).to.be.true;\r",
									"});\r",
									"\r",
									"// Test for specific category ID\r",
									"pm.test(\"Specific category ID exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.some(category => category.id === 5)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has an 'id' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a 'description' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('description');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories/1",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains updated category description\", function () {\r",
									"    pm.expect(pm.response.json().description).to.equal(\"Test Category Updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 14,\r\n    \"description\": \"Test Category Updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories/14",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories",
								"14"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 14,\r\n    \"description\": \"Test Category Updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories/14",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories",
								"14"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories Containing Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each category item has an 'id' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(function (category) {\r",
									"        pm.expect(category).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each category item has a 'description' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(function (category) {\r",
									"        pm.expect(category).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific categories\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Electronics\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Books\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Sports\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories/contain-items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories",
								"contain-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories That Don't Contain Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response contains the expected categories\r",
									"pm.test(\"Response contains expected categories\", function () {\r",
									"    pm.expect(pm.response.json()).to.eql([\r",
									"        { \"id\": 7, \"description\": \"Art\" },\r",
									"        { \"id\": 11, \"description\": \"Music\" },\r",
									"        { \"id\": 12, \"description\": \"Vehicles\" },\r",
									"        { \"id\": 13, \"description\": \"Garden\" }\r",
									"    ]);\r",
									"});\r",
									"\r",
									"// Test 3: Verify the response body is an array\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test 4: Verify the 'description' field is not empty for each category\r",
									"pm.test(\"Description field is not empty for each category\", function () {\r",
									"    pm.response.json().forEach(function (category) {\r",
									"        pm.expect(category.description).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Verify the 'id' field is a number for each category\r",
									"pm.test(\"Id field is a number for each category\", function () {\r",
									"    pm.response.json().forEach(function (category) {\r",
									"        pm.expect(category.id).to.be.a('number');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Categories/dont-contain-items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Categories",
								"dont-contain-items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items Controller",
			"item": [
				{
					"name": "Post Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the created item name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Test Item\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the created item price\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.price).to.eql(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Item\",\r\n  \"price\": 400,\r\n  \"categoryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Specific headers are present in the response\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Total number of items in the response\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.length(14);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has an id, name, price, status, and categoryId\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.all.keys('id', 'name', 'price', 'status', 'categoryId');\r",
									"});\r",
									"\r",
									"pm.test(\"Each property in the response body is not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().price).to.not.be.null;\r",
									"    pm.expect(pm.response.json().status).to.not.be.null;\r",
									"    pm.expect(pm.response.json().categoryId).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/1",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated item name is correct\", function () {\r",
									"    pm.expect(pm.response.json().name).to.equal(\"Test Item Updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Updated item price is correct\", function () {\r",
									"    pm.expect(pm.response.json().price).to.equal(450);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated item category ID is correct\", function () {\r",
									"    pm.expect(pm.response.json().categoryId).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 15,\r\n  \"name\": \"Test Item Updated\",\r\n  \"price\": 450,\r\n  \"categoryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/15",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 15,\r\n  \"name\": \"Test Item Updated\",\r\n  \"price\": 450,\r\n  \"categoryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/15",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items From Specific Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the content type of the response\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the values in the response body\", function () {\r",
									"    pm.expect(pm.response.json()[0].id).to.eql(1);\r",
									"    pm.expect(pm.response.json()[0].name).to.eql(\"Laptop HP 15\");\r",
									"    pm.expect(pm.response.json()[0].price).to.eql(800);\r",
									"    pm.expect(pm.response.json()[0].status).to.eql(1);\r",
									"    pm.expect(pm.response.json()[0].categoryId).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/categoryid/1",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"categoryid",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items Until Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has a price less than 100\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item.price).to.be.below(100);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has a name field\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('name');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has a status field\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/until-price/100",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"until-price",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sold Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has an 'id' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has a 'name' field\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('name');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has a 'price' field\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('price');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/sold-items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"sold-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Available Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify each item has an 'id'\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify each item has a 'name'\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('name');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify each item has a 'price'\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('price');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/available-items",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"available-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sold Items By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has the correct properties\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('price');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('categoryId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Items belong to the correct category\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item.categoryId).to.equal(4);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/sold-items-by-category/4",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"sold-items-by-category",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Available Items By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has the correct properties\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('price');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('categoryId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Items belong to the correct category\", function () {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item.categoryId).to.equal(4);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Items/available-items-by-category/4",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Items",
								"available-items-by-category",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sales Controller",
			"item": [
				{
					"name": "Post Sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid ID\", function () {\r",
									"    pm.expect(pm.response.json().id).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid price\", function () {\r",
									"    pm.expect(pm.response.json().price).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid itemId\", function () {\r",
									"    pm.expect(pm.response.json().itemId).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": 1300,\r\n  \"itemId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Specific headers are present in the response\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each object in the array has an 'id' field\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each object in the array has a 'date' field in a valid date format\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('date').that.is.a('string').and.matches(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sale By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body contains the correct 'id'\", function () {\r",
									"    pm.expect(pm.response.json().id).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body contains the 'date' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('date');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body contains the 'price' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('price');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response headers contain 'Content-Type'\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/1",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sale Total Sales Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the 'totalValue' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('totalValue');\r",
									"});\r",
									"\r",
									"pm.test(\"The totalValue is a number\", function () {\r",
									"    pm.expect(pm.response.json().totalValue).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/total-value",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"total-value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sale Total Sales Value By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the 'totalValue' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('totalValue');\r",
									"});\r",
									"\r",
									"pm.test(\"The totalValue is a number\", function () {\r",
									"    pm.expect(pm.response.json().totalValue).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/total-value-by-category/1",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"total-value-by-category",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sale Total Sales Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the correct structure\", function () {\r",
									"    pm.response.to.have.jsonBody('totalQuantity');\r",
									"    pm.response.to.not.have.jsonBody('incorrectField');\r",
									"});\r",
									"\r",
									"pm.test(\"Total quantity is a number\", function () {\r",
									"    pm.expect(pm.response.json().totalQuantity).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/total-quantity",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"total-quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sale Total Sales Quantity By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a valid JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the 'totalQuantity' field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('totalQuantity');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present and has the value 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/total-quantity-by-category/10",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"total-quantity-by-category",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sales Per Period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific sales data\", function () {\r",
									"    pm.expect(pm.response.json()).to.eql([\r",
									"        {\r",
									"            \"id\": 3,\r",
									"            \"date\": \"2025-01-15\",\r",
									"            \"price\": 1299,\r",
									"            \"itemId\": 3\r",
									"        },\r",
									"        {\r",
									"            \"id\": 7,\r",
									"            \"date\": \"2025-01-18\",\r",
									"            \"price\": 350,\r",
									"            \"itemId\": 9\r",
									"        },\r",
									"        {\r",
									"            \"id\": 2,\r",
									"            \"date\": \"2025-01-20\",\r",
									"            \"price\": 450.5,\r",
									"            \"itemId\": 2\r",
									"        },\r",
									"        {\r",
									"            \"id\": 6,\r",
									"            \"date\": \"2025-01-22\",\r",
									"            \"price\": 1200,\r",
									"            \"itemId\": 8\r",
									"        },\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"date\": \"2025-01-25\",\r",
									"            \"price\": 899.99,\r",
									"            \"itemId\": 1\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body items have specific properties\", function () {\r",
									"    pm.response.json().forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('date');\r",
									"        pm.expect(item).to.have.property('price');\r",
									"        pm.expect(item).to.have.property('itemId');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/per-period/date1/2025-01-15/date2/2025-01-25",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"per-period",
								"date1",
								"2025-01-15",
								"date2",
								"2025-01-25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sales Above Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each object in the array has 'id', 'date', 'price', and 'itemId'\", function () {\r",
									"    pm.response.json().forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('date');\r",
									"        pm.expect(item).to.have.property('price');\r",
									"        pm.expect(item).to.have.property('itemId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each 'price' in the array is above 1000\", function () {\r",
									"    pm.response.json().forEach(function (item) {\r",
									"        pm.expect(item.price).to.be.above(1000);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}:{{port}}/api/Sales/above-value/1000",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Sales",
								"above-value",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}